version: '3.8'

services:
  # Main application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: bulk-doc-generator-backend-prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env
    volumes:
      - app_data:/app/uploads
      - app_data:/app/generated
      - app_data:/app/temp
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bulk-doc-generator-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-bulkdocgenerator_prod}
      POSTGRES_USER: ${DB_USER:-bulkdocuser_prod}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-prod.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bulkdocuser_prod} -d ${DB_NAME:-bulkdocgenerator_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: bulk-doc-generator-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bulk-doc-generator-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: bulk-doc-generator-backup-prod
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backups
    depends_on:
      - postgres
    networks:
      - app_network
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]
    profiles:
      - backup

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
